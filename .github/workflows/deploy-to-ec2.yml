name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" > .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "VISION_KEY=${{ secrets.VISION_KEY }}" >> .env
          echo "VISION_ENDPOINT=${{ secrets.VISION_ENDPOINT }}" >> .env
          echo "REACT_APP_ENV=production" >> .env
          echo "REACT_APP_AWS_ACCESS_KEY_ID=${{ secrets.REACT_APP_AWS_ACCESS_KEY_ID }}" >> .env
          echo "REACT_APP_AWS_SECRET_ACCESS_KEY=${{ secrets.REACT_APP_AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "REACT_APP_AWS_BUCKET_NAME=${{ secrets.REACT_APP_AWS_BUCKET_NAME }}" >> .env
          echo "REACT_APP_AWS_REGION=${{ secrets.REACT_APP_AWS_REGION }}" >> .env
          echo "REACT_APP_API_URL=https://${{ secrets.EC2_DOMAIN }}/api" >> .env
          echo "REACT_APP_IMG_URL=${{ secrets.REACT_APP_IMG_URL }}" >> .env
    
      - name: Debug SSH Connection
        run: |
            echo "Checking EC2_HOST: ${{ secrets.EC2_HOST }}"
            echo "Testing SSH connection..."
            ssh -v -o StrictHostKeyChecking=no ${{ secrets.EC2_HOST }} exit
        shell: bash

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Print EC2 host info for debugging (IP only, no sensitive data)
          echo "Connecting to host: $(echo ${{ secrets.EC2_HOST }} | cut -d '@' -f2)"
          
          # Try to verify SSH port is open
          timeout 5 nc -z ${{ secrets.EC2_HOST }} 22 || echo "Warning: Cannot verify if port 22 is open"
          
          # Add retry logic for ssh-keyscan
          for i in {1..5}; do
            echo "Attempt $i: Running ssh-keyscan..."
            if ssh-keyscan -T 10 -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts; then
              echo "✓ Successfully added host to known_hosts"
              break
            else
              echo "× ssh-keyscan failed, retrying in 3 seconds..."
              sleep 3
            fi
            
            # Exit with helpful message if all attempts fail
            if [ $i -eq 5 ]; then
              echo "ERROR: Could not connect to EC2 instance after 5 attempts"
              echo "Please check:"
              echo "- EC2 instance is running"
              echo "- Security group allows SSH from GitHub Actions IPs"
              echo "- EC2_HOST secret is correctly configured (e.g., ec2-user@11.22.33.44)"
              exit 1
            fi
          done
          
          # Verify we have a valid known_hosts entry
          echo "Known hosts content:"
          cat ~/.ssh/known_hosts
      
      - name: Deploy to EC2
        run: |
          # Create deployment package
          tar -czf deploy.tar.gz .env docker-compose.yml API/ frontend/ image-recognition/ db/ nginx/
          
          # Transfer files
          scp -i ~/.ssh/id_rsa deploy.tar.gz ${{ secrets.EC2_HOST }}:~/flowscan-app/
          
          # Execute deployment commands
          ssh -i ~/.ssh/id_rsa ${{ secrets.EC2_HOST }} "
            cd ~/flowscan-app && 
            tar -xzf deploy.tar.gz && 
            # Add AWS credentials for container itself
            echo 'AWS_ACCESS_KEY_ID=${{ secrets.REACT_APP_AWS_ACCESS_KEY_ID }}' >> .env &&
            echo 'AWS_SECRET_ACCESS_KEY=${{ secrets.REACT_APP_AWS_SECRET_ACCESS_KEY }}' >> .env &&
            echo 'AWS_REGION=${{ secrets.REACT_APP_AWS_REGION }}' >> .env &&
            # Deploy with Docker Compose
            docker-compose down &&
            docker-compose pull || true &&
            docker-compose build --no-cache &&
            docker-compose up -d
          "