name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: flowscan
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Need history to detect changes

      - name: Detect changed files
        id: changes
        run: |
          # Default to rebuilding everything for workflow_dispatch events
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "api_changed=true" >> $GITHUB_OUTPUT
            echo "frontend_changed=true" >> $GITHUB_OUTPUT
            echo "ocr_changed=true" >> $GITHUB_OUTPUT
            echo "db_changed=true" >> $GITHUB_OUTPUT
            echo "config_changed=true" >> $GITHUB_OUTPUT
            echo "All services will be rebuilt (manual trigger)"
            exit 0
          fi

          # For push events, detect changed files
          git diff --name-only HEAD^ HEAD > changed_files.txt
          
          # Check for changes in each component
          if grep -q "API/" changed_files.txt; then
            echo "api_changed=true" >> $GITHUB_OUTPUT
            echo "Backend API changes detected"
          else
            echo "api_changed=false" >> $GITHUB_OUTPUT
          fi
          
          if grep -q "frontend/" changed_files.txt; then
            echo "frontend_changed=true" >> $GITHUB_OUTPUT
            echo "Frontend changes detected"
          else
            echo "frontend_changed=false" >> $GITHUB_OUTPUT
          fi
          
          if grep -q "image-recognition/" changed_files.txt; then
            echo "ocr_changed=true" >> $GITHUB_OUTPUT
            echo "OCR service changes detected"
          else
            echo "ocr_changed=false" >> $GITHUB_OUTPUT
          fi
          
          if grep -q "db/" changed_files.txt; then
            echo "db_changed=true" >> $GITHUB_OUTPUT
            echo "Database changes detected"
          else
            echo "db_changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Docker-compose or env changes require full rebuild
          if grep -q "docker-compose.yml\|\.env" changed_files.txt; then
            echo "config_changed=true" >> $GITHUB_OUTPUT
            echo "Configuration changes detected - will rebuild all"
          else
            echo "config_changed=false" >> $GITHUB_OUTPUT
          fi
          
          # Print changed files for debugging
          echo "Changed files:"
          cat changed_files.txt

      - name: Create .env file
        run: |
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" > .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
          echo "VISION_KEY=${{ secrets.VISION_KEY }}" >> .env
          echo "VISION_ENDPOINT=${{ secrets.VISION_ENDPOINT }}" >> .env
          echo "REACT_APP_ENV=production" >> .env
          echo "REACT_APP_AWS_ACCESS_KEY_ID=${{ secrets.REACT_APP_AWS_ACCESS_KEY_ID }}" >> .env
          echo "REACT_APP_AWS_SECRET_ACCESS_KEY=${{ secrets.REACT_APP_AWS_SECRET_ACCESS_KEY }}" >> .env
          echo "REACT_APP_AWS_BUCKET_NAME=${{ secrets.REACT_APP_AWS_BUCKET_NAME }}" >> .env
          echo "REACT_APP_AWS_REGION=${{ secrets.REACT_APP_AWS_REGION }}" >> .env
          echo "REACT_APP_API_URL=https://${{ secrets.EC2_DOMAIN }}/api" >> .env
          echo "REACT_APP_IMG_URL=${{ secrets.REACT_APP_IMG_URL }}" >> .env
    
      - name: Verify secrets presence
        run: |
          echo "Testing if secrets are accessible..."
          if [ -n "${{ secrets.EC2_HOST }}" ]; then
            echo "✅ EC2_HOST secret exists"
          else
            echo "❌ EC2_HOST secret is empty or inaccessible"
          fi
          
          if [ -n "${{ secrets.SSH_PRIVATE_KEY }}" ]; then
            echo "✅ SSH_PRIVATE_KEY secret exists"
          else
            echo "❌ SSH_PRIVATE_KEY secret is empty or inaccessible"
          fi

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          
          # Use the SSH key from secrets
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          REMOTE_HOST=${{secrets.EC2_HOST}}
          
          echo "Connecting to host: $REMOTE_HOST"
          
          # Try to verify SSH port is open
          nc -zv $(echo $REMOTE_HOST | cut -d '@' -f2) 22 || echo "Warning: Cannot verify if port 22 is open"
          
          # Add retry logic for ssh-keyscan with the hardcoded IP
          EC2_IP="13.239.232.171"
          for i in {1..3}; do
            echo "Attempt $i: Running ssh-keyscan..."
            if ssh-keyscan -T 10 $EC2_IP >> ~/.ssh/known_hosts; then
              echo "✓ Successfully added host to known_hosts"
              break
            else
              echo "× ssh-keyscan failed, retrying in 3 seconds..."
              sleep 3
            fi
          done
          
          # Test connection with verbose output
          echo "Testing SSH connection directly..."
          ssh -v -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $REMOTE_HOST "echo Connection successful"

      - name: Deploy to EC2 with selective rebuilds
        run: |
          # Create deployment package
          tar -czf deploy.tar.gz .env docker-compose.yml API/ frontend/ image-recognition/ db/ nginx/
          
          # Ensure the target directory exists on EC2
          ssh -i ~/.ssh/id_rsa $REMOTE_HOST "mkdir -p ~/flowscan-app/"

          # Transfer files
          scp -i ~/.ssh/id_rsa deploy.tar.gz $REMOTE_HOST:~/flowscan-app/
          
          # Prepare build commands based on changed components
          BUILD_COMMAND=""
          if [[ "${{ steps.changes.outputs.config_changed }}" == "true" ]]; then
            # Full rebuild if configuration changed
            BUILD_COMMAND="docker-compose build --no-cache"
            echo "Configuration changes detected - rebuilding all services"
          else
            # Selective rebuilds
            SERVICES_TO_BUILD=""
            
            if [[ "${{ steps.changes.outputs.api_changed }}" == "true" ]]; then
              SERVICES_TO_BUILD="$SERVICES_TO_BUILD csharp-backend"
            fi
            
            if [[ "${{ steps.changes.outputs.frontend_changed }}" == "true" ]]; then
              SERVICES_TO_BUILD="$SERVICES_TO_BUILD frontend"
            fi
            
            if [[ "${{ steps.changes.outputs.ocr_changed }}" == "true" ]]; then
              SERVICES_TO_BUILD="$SERVICES_TO_BUILD image-recognition"
            fi
            
            if [[ "${{ steps.changes.outputs.db_changed }}" == "true" ]]; then
              SERVICES_TO_BUILD="$SERVICES_TO_BUILD db"
            fi
            
            if [[ -n "$SERVICES_TO_BUILD" ]]; then
              BUILD_COMMAND="docker-compose build --no-cache $SERVICES_TO_BUILD"
              echo "Rebuilding specific services: $SERVICES_TO_BUILD"
            else
              echo "No service changes detected - using existing images"
              BUILD_COMMAND="echo 'No rebuilds needed'"
            fi
          fi
          
          # Execute deployment commands
          ssh -i ~/.ssh/id_rsa $REMOTE_HOST "
            cd ~/flowscan-app && 
            tar -xzf deploy.tar.gz && 
            # Add AWS credentials for container itself
            echo 'AWS_ACCESS_KEY_ID=${{ secrets.REACT_APP_AWS_ACCESS_KEY_ID }}' >> .env &&
            echo 'AWS_SECRET_ACCESS_KEY=${{ secrets.REACT_APP_AWS_SECRET_ACCESS_KEY }}' >> .env &&
            echo 'AWS_REGION=${{ secrets.REACT_APP_AWS_REGION }}' >> .env &&
            # Deploy with Docker Compose - selective rebuilds
            docker-compose down &&
            docker-compose pull || true &&
            $BUILD_COMMAND &&
            docker-compose up -d
          "